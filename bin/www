#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("myapp:server");
var http = require("http");
var domain = require("domain");
var config = require("../site_config");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || config.nodeServer.port);
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/*----------异常处理----------*/
app.use(function (req, res, next) {
    var reqDomain = domain.create();
    reqDomain.on("error", function (err) {
        console.log("状态吗：" + res.statusCode);
        // if (res.statusCode != 401) {
        try {
            // 强制退出机制
            var killTimer = setTimeout(function () {
                process.exit(1);
            }, 30000);
            killTimer.unref(); // 非常重要
            // 自动退出机制，停止接收新链接，等待当前已建立连接的关闭
            server.close(function () {
                // 此时所有连接均已关闭，此时 Node 会自动退出，不需要再调用
                process.exit(1);
                res.send(500); // 成功给用户返回了 500
            });
        } catch (e) {
            console.error("err", e.stack);
            res.send(500, e.stack);
        }
        // }
    });
    reqDomain.run(next);
});

process.on("uncaughtException", function (err) {
    console.error(err);
    try {
        var killTimer = setTimeout(function () {
            process.exit(1);
        }, 30000);
        killTimer.unref();
        server.close();
        console.error("error when exit", err.stack);
    } catch (e) {
        console.error("error when exit", e);
    }
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    console.log(config.nodeServer.target)
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}
